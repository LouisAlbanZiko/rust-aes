mod common;
pub mod aes_128;
pub mod aes_192;
pub mod aes_256;

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn aes_128_test() {
        let input: [u8; 16] = [0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff];
        let key:   [u8; 16] = [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f];

        let encrypted = aes_128::encrypt_block(input, key);
        common::print_state(encrypted);

        assert_eq!(encrypted, [0x69, 0xc4, 0xe0, 0xd8, 0x6a, 0x7b, 0x04, 0x30, 0xd8, 0xcd, 0xb7, 0x80, 0x70, 0xb4, 0xc5, 0x5a]);

        let decrypted = aes_128::decrypt_block(encrypted, key);
        common::print_state(decrypted);

        assert_eq!(input, decrypted);
    }

    #[test]
    fn aes_192_test() {
        let input: [u8; 16] = [0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff];
        let key:   [u8; 24] = [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17];

        let encrypted = aes_192::encrypt_block(input, key);
        common::print_state(encrypted);

        assert_eq!(encrypted, [0xdd, 0xa9, 0x7c, 0xa4, 0x86, 0x4c, 0xdf, 0xe0, 0x6e, 0xaf, 0x70, 0xa0, 0xec, 0x0d, 0x71, 0x91]);

        let decrypted = aes_192::decrypt_block(encrypted, key);
        common::print_state(decrypted);

        assert_eq!(input, decrypted);
    }

    #[test]
    fn aes_256_test() {
        let input: [u8; 16] = [0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff];
        let key:   [u8; 32] = [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f];

        let encrypted = aes_256::encrypt_block(input, key);
        common::print_state(encrypted);

        assert_eq!(encrypted, [0x8e, 0xa2, 0xb7, 0xca, 0x51, 0x67, 0x45, 0xbf, 0xea, 0xfc, 0x49, 0x90, 0x4b, 0x49, 0x60, 0x89]);

        let decrypted = aes_256::decrypt_block(encrypted, key);
        common::print_state(decrypted);

        assert_eq!(input, decrypted);
    }
}
